<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.IO.FileSystem.Watcher</name>
    </assembly>
    <members>
        <member name="T:System.IO.ErrorEventArgs">
            <devdoc>
               Provides data for the <see cref='E:System.IO.FileSystemWatcher.Error'/> event.
            </devdoc>
        </member>
        <member name="M:System.IO.ErrorEventArgs.#ctor(System.Exception)">
            <devdoc>
               Initializes a new instance of the class.
            </devdoc>
        </member>
        <member name="M:System.IO.ErrorEventArgs.GetException">
            <devdoc>
               Gets the <see cref='T:System.Exception'/> that represents the error that occurred.
            </devdoc>
        </member>
        <member name="T:System.IO.ErrorEventHandler">
            <devdoc>
               Represents the method that will
               handle the <see cref='E:System.IO.FileSystemWatcher.Error'/>
               event of a <see cref='T:System.IO.FileSystemWatcher'/>.
            </devdoc>
        </member>
        <member name="T:System.IO.FileSystemEventArgs">
            <devdoc>
               Provides data for the directory events: <see cref='E:System.IO.FileSystemWatcher.Changed'/>, <see cref='E:System.IO.FileSystemWatcher.Created'/>, <see cref='E:System.IO.FileSystemWatcher.Deleted'/>.
            </devdoc>
        </member>
        <member name="M:System.IO.FileSystemEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String)">
            <devdoc>
            Initializes a new instance of the <see cref='T:System.IO.FileSystemEventArgs'/> class.
            </devdoc>
        </member>
        <member name="M:System.IO.FileSystemEventArgs.Combine(System.String,System.String)">
            <summary>Combines a directory path and a relative file name into a single path.</summary>
            <param name="directoryPath">The directory path.</param>
            <param name="name">The file name.</param>
            <returns>The combined name.</returns>
            <remarks>
            This is like Path.Combine, except without argument validation,
            and a separator is used even if the name argument is empty.
            </remarks>
        </member>
        <member name="P:System.IO.FileSystemEventArgs.ChangeType">
            <devdoc>
               Gets one of the <see cref='T:System.IO.WatcherChangeTypes'/> values.
            </devdoc>
        </member>
        <member name="P:System.IO.FileSystemEventArgs.FullPath">
            <devdoc>
               Gets the fully qualified path of the affected file or directory.
            </devdoc>
        </member>
        <member name="P:System.IO.FileSystemEventArgs.Name">
            <devdoc>
                  Gets the name of the affected file or directory.
            </devdoc>
        </member>
        <member name="T:System.IO.FileSystemEventHandler">
            <devdoc>
            Represents the method that will handle the <see cref='E:System.IO.FileSystemWatcher.Changed'/>, 
            <see cref='E:System.IO.FileSystemWatcher.Created'/>, or 
            <see cref='E:System.IO.FileSystemWatcher.Deleted'/> event of 
            a <see cref='T:System.IO.FileSystemWatcher'/> class.
            </devdoc>
        </member>
        <member name="T:System.IO.FileSystemWatcher">
            <devdoc>
               Listens to the system directory change notifications and
               raises events when a directory or file within a directory changes.
            </devdoc>
        </member>
        <member name="M:System.IO.FileSystemWatcher.#ctor">
            <devdoc>
               Initializes a new instance of the <see cref='T:System.IO.FileSystemWatcher'/> class.
            </devdoc>
        </member>
        <member name="M:System.IO.FileSystemWatcher.#ctor(System.String)">
            <devdoc>
               Initializes a new instance of the <see cref='T:System.IO.FileSystemWatcher'/> class,
               given the specified directory to monitor.
            </devdoc>
        </member>
        <member name="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
            <devdoc>
               Initializes a new instance of the <see cref='T:System.IO.FileSystemWatcher'/> class,
               given the specified directory and type of files to monitor.
            </devdoc>
        </member>
        <member name="P:System.IO.FileSystemWatcher.NotifyFilter">
            <devdoc>
               Gets or sets the type of changes to watch for.
            </devdoc>
        </member>
        <member name="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
            <devdoc>
               Gets or sets a value indicating whether the component is enabled.
            </devdoc>
        </member>
        <member name="P:System.IO.FileSystemWatcher.Filter">
            <devdoc>
               Gets or sets the filter string, used to determine what files are monitored in a directory.
            </devdoc>
        </member>
        <member name="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
            <devdoc>
               Gets or sets a value indicating whether subdirectories within the specified path should be monitored.
            </devdoc>
        </member>
        <member name="P:System.IO.FileSystemWatcher.InternalBufferSize">
            <devdoc>
               Gets or sets the size of the internal buffer.
            </devdoc>
        </member>
        <member name="M:System.IO.FileSystemWatcher.AllocateBuffer">
            <summary>Allocates a buffer of the requested internal buffer size.</summary>
            <returns>The allocated buffer.</returns>
        </member>
        <member name="P:System.IO.FileSystemWatcher.Path">
            <devdoc>
               Gets or sets the path of the directory to watch.
            </devdoc>
        </member>
        <member name="E:System.IO.FileSystemWatcher.Changed">
            <devdoc>
               Occurs when a file or directory in the specified <see cref='P:System.IO.FileSystemWatcher.Path'/> is changed.
            </devdoc>
        </member>
        <member name="E:System.IO.FileSystemWatcher.Created">
            <devdoc>
               Occurs when a file or directory in the specified <see cref='P:System.IO.FileSystemWatcher.Path'/> is created.
            </devdoc>
        </member>
        <member name="E:System.IO.FileSystemWatcher.Deleted">
            <devdoc>
               Occurs when a file or directory in the specified <see cref='P:System.IO.FileSystemWatcher.Path'/> is deleted.
            </devdoc>
        </member>
        <member name="E:System.IO.FileSystemWatcher.Error">
            <devdoc>
               Occurs when the internal buffer overflows.
            </devdoc>
        </member>
        <member name="E:System.IO.FileSystemWatcher.Renamed">
            <devdoc>
               Occurs when a file or directory in the specified <see cref='P:System.IO.FileSystemWatcher.Path'/>
               is renamed.
            </devdoc>
        </member>
        <member name="M:System.IO.FileSystemWatcher.MatchPattern(System.ReadOnlySpan{System.Char})">
            <summary>
            Sees if the name given matches the name filter we have.
            </summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.NotifyInternalBufferOverflowEvent">
            <summary>
            Raises the event to each handler in the list.
            </summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Raises the event to each handler in the list.
            </summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.NotifyFileSystemEventArgs(System.IO.WatcherChangeTypes,System.ReadOnlySpan{System.Char})">
            <summary>
            Raises the event to each handler in the list.
            </summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.NotifyFileSystemEventArgs(System.IO.WatcherChangeTypes,System.String)">
            <summary>
            Raises the event to each handler in the list.
            </summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
            <devdoc>
               Raises the <see cref='E:System.IO.FileSystemWatcher.Changed'/> event.
            </devdoc>
        </member>
        <member name="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
            <devdoc>
               Raises the <see cref='E:System.IO.FileSystemWatcher.Created'/> event.
            </devdoc>
        </member>
        <member name="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
            <devdoc>
               Raises the <see cref='E:System.IO.FileSystemWatcher.Deleted'/> event.
            </devdoc>
        </member>
        <member name="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
            <devdoc>
               Raises the <see cref='E:System.IO.FileSystemWatcher.Error'/> event.
            </devdoc>
        </member>
        <member name="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
            <devdoc>
               Raises the <see cref='E:System.IO.FileSystemWatcher.Renamed'/> event.
            </devdoc>
        </member>
        <member name="M:System.IO.FileSystemWatcher.Restart">
            <devdoc>
                Stops and starts this object.
            </devdoc>
            <internalonly/>
        </member>
        <member name="T:System.IO.FileSystemWatcher.NormalizedFilterCollection.ImmutableStringList">
            <summary>
            List that maintains its underlying data in an immutable array, such that the list
            will never modify an array returned from its Items property. This is to allow
            the array to be enumerated safely while another thread might be concurrently mutating
            the collection.
            </summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.StartRaisingEvents">
            <summary>Starts a new watch operation if one is not currently running.</summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.StopRaisingEvents">
            <summary>Cancels the currently running watch operation if there is one.</summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.FinalizeDispose">
            <summary>Called when FileSystemWatcher is finalized.</summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.MaxUserInstancesPath">
            <summary>Path to the procfs file that contains the maximum number of inotify instances an individual user may create.</summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.MaxUserWatchesPath">
            <summary>Path to the procfs file that contains the maximum number of inotify watches an individual user may create.</summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher._cancellation">
            <summary>
            Cancellation for the currently running watch operation.  
            This is non-null if an operation has been started and null if stopped.
            </summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.ReadMaxUserLimit(System.String)">
            <summary>Reads the value of a max user limit path from procfs.</summary>
            <param name="path">The path to read.</param>
            <returns>The value read, or "0" if a failure occurred.</returns>
        </member>
        <member name="M:System.IO.FileSystemWatcher.TranslateFilters(System.IO.NotifyFilters)">
            <summary>
            Maps the FileSystemWatcher's NotifyFilters enumeration to the 
            corresponding Interop.Sys.NotifyEvents values.
            </summary>
            <param name="filters">The filters provided the by user.</param>
            <returns>The corresponding NotifyEvents values to use with inotify.</returns>
        </member>
        <member name="T:System.IO.FileSystemWatcher.RunningInstance">
            <summary>
            State and processing associated with an active watch operation.  This state is kept separate from FileSystemWatcher to avoid 
            race conditions when a user starts/stops/starts/stops/etc. in quick succession, resulting in the potential for multiple 
            active operations. It also helps with avoiding rooted cycles and enabling proper finalization.
            </summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance.c_INotifyEventSize">
            <summary>
            The size of the native struct inotify_event.  4 32-bit integer values, the last of which is a length
            that indicates how many bytes follow to form the string name.
            </summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance._weakWatcher">
            <summary>
            Weak reference to the associated watcher.  A weak reference is used so that the FileSystemWatcher may be collected and finalized,
            causing an active operation to be torn down.  With a strong reference, a blocking read on the inotify handle will keep alive this
            instance which will keep alive the FileSystemWatcher which will not be finalizable and thus which will never signal to the blocking
            read to wake up in the event that the user neglects to stop raising events.
            </summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance._directoryPath">
            <summary>
            The path for the primary watched directory.
            </summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance._inotifyHandle">
            <summary>
            The inotify handle / file descriptor
            </summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance._buffer">
            <summary>
            Buffer used to store raw bytes read from the inotify handle.
            </summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance._bufferAvailable">
            <summary>
            The number of bytes read into the _buffer.
            </summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance._bufferPos">
            <summary>
            The next position in _buffer from which an event should be read.
            </summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance._notifyFilters">
            <summary>
            Filters to use when adding a watch on directories.
            </summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance._includeSubdirectories">
            <summary>
            Whether to monitor subdirectories.  Unlike Win32, inotify does not implicitly monitor subdirectories;
            watches must be explicitly added for those subdirectories.
            </summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance._cancellationToken">
            <summary>
            Token to monitor for cancellation requests, upon which processing is stopped and all
            state is cleaned up.
            </summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance._wdToPathMap">
            <summary>
            Mapping from watch descriptor (as returned by inotify_add_watch) to state for
            the associated directory being watched.  Events from inotify include only relative
            names, so the watch descriptor in an event must be used to look up the associated
            directory path in order to convert the relative filename into a full path.
            </summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance.NAME_MAX">
            <summary>
            Maximum length of a name returned from inotify event.
            </summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.RunningInstance.#ctor(System.IO.FileSystemWatcher,Microsoft.Win32.SafeHandles.SafeFileHandle,System.String,System.Boolean,System.IO.NotifyFilters,System.Threading.CancellationToken)">
            <summary>Initializes the instance with all state necessary to operate a watch.</summary>
        </member>
        <member name="P:System.IO.FileSystemWatcher.RunningInstance.SyncObj">
            <summary>Object to use for synchronizing access to state when necessary.</summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.RunningInstance.AddDirectoryWatch(System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory,System.String)">
            <summary>Adds a watch on a directory to the existing inotify handle.</summary>
            <param name="parent">The parent directory entry.</param>
            <param name="directoryName">The new directory path to monitor, relative to the root.</param>
        </member>
        <member name="M:System.IO.FileSystemWatcher.RunningInstance.AddDirectoryWatchUnlocked(System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory,System.String)">
            <summary>Adds a watch on a directory to the existing inotify handle.</summary>
            <param name="parent">The parent directory entry.</param>
            <param name="directoryName">The new directory path to monitor, relative to the root.</param>
        </member>
        <member name="M:System.IO.FileSystemWatcher.RunningInstance.RemoveWatchedDirectory(System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory,System.Boolean)">
            <summary>Removes the watched directory from our state, and optionally removes the inotify watch itself.</summary>
            <param name="directoryEntry">The directory entry to remove.</param>
            <param name="removeInotify">true to remove the inotify watch; otherwise, false.  The default is true.</param>
        </member>
        <member name="M:System.IO.FileSystemWatcher.RunningInstance.RemoveWatchedDirectoryUnlocked(System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory,System.Boolean)">
            <summary>Removes the watched directory from our state, and optionally removes the inotify watch itself.</summary>
            <param name="directoryEntry">The directory entry to remove.</param>
            <param name="removeInotify">true to remove the inotify watch; otherwise, false.  The default is true.</param>
        </member>
        <member name="M:System.IO.FileSystemWatcher.RunningInstance.CancellationCallback">
            <summary>
            Callback invoked when cancellation is requested.  Removes all watches, 
            which will cause the active processing loop to shutdown.
            </summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.RunningInstance.ProcessEvents">
            <summary>
            Main processing loop.  This is currently implemented as a synchronous operation that continually
            reads events and processes them... in the future, this could be changed to use asynchronous processing
            if the impact of using a thread-per-FileSystemWatcher is too high.
            </summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.RunningInstance.TryReadEvent(System.IO.FileSystemWatcher.RunningInstance.NotifyEvent@)">
            <summary>Read event from the inotify handle into the supplied event object.</summary>
            <param name="notifyEvent">The event object to be populated.</param>
            <returns><see langword="true"/> if event was read successfully, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:System.IO.FileSystemWatcher.RunningInstance.ReadName(System.Int32,System.Int32)">
            <summary>
            Reads a UTF8 string from _buffer starting at the specified position and up to
            the specified length.  Null termination is trimmed off (the length may include
            many null bytes, not just one, or it may include none).
            </summary>
            <param name="position"></param>
            <param name="nameLength"></param>
            <returns></returns>
        </member>
        <member name="T:System.IO.FileSystemWatcher.RunningInstance.NotifyEvent">
            <summary>An event read and translated from the inotify handle.</summary>
            <remarks>
            Unlike it's native counterpart, this struct stores a string name rather than
            an integer length and a char[].  It is not directly marshalable.
            </remarks>
        </member>
        <member name="T:System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory">
            <summary>State associated with a watched directory.</summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory.t_builder">
            <summary>A StringBuilder cached on the current thread to avoid allocations when possible.</summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory.Parent">
            <summary>The parent directory.</summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory.WatchDescriptor">
            <summary>The watch descriptor associated with this directory.</summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory.Name">
            <summary>The filename of this directory.</summary>
        </member>
        <member name="F:System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory.Children">
            <summary>Child directories of this directory for which we added explicit watches.</summary>
        </member>
        <member name="P:System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory.InitializedChildren">
            <summary>Child directories of this directory for which we added explicit watches.  This is the same as Children, but ensured to be initialized as non-null.</summary>
        </member>
        <member name="M:System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory.GetPath(System.Boolean,System.String)">
            <summary>Gets the path of this directory.</summary>
            <param name="relativeToRoot">Whether to get a path relative to the root directory being watched, or a full path.</param>
            <param name="additionalName">An additional name to include in the path, relative to this directory.</param>
            <returns>The computed path.</returns>
        </member>
        <member name="M:System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory.Write(System.Text.StringBuilder,System.Boolean)">
            <summary>Write's this directory's path to the builder.</summary>
            <param name="builder">The builder to which to write.</param>
            <param name="relativeToRoot">
            true if the path should be relative to the root directory being watched.
            false if the path should be a full file system path, including that of
            the root directory being watched.
            </param>
        </member>
        <member name="M:System.IO.FileSystemWatcher.RunningInstance.WatchedDirectory.AppendSeparatorIfNeeded(System.Text.StringBuilder)">
            <summary>Adds a directory path separator to the end of the builder if one isn't there.</summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:System.IO.InternalBufferOverflowException">
            <devdoc>
               The exception that is thrown when the internal buffer overflows.
            </devdoc>
        </member>
        <member name="M:System.IO.InternalBufferOverflowException.#ctor">
            <devdoc>
               Initializes a new default instance of the <see cref='T:System.IO.InternalBufferOverflowException'/> class.
            </devdoc>
        </member>
        <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.String)">
            <devdoc>
               Initializes a new instance of the <see cref='T:System.IO.InternalBufferOverflowException'/> class with the error message to be displayed specified.
            </devdoc>
        </member>
        <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.String,System.Exception)">
            <devdoc>
               Initializes a new instance of the <see cref='T:System.IO.InternalBufferOverflowException'/>
               class with the message to be displayed and the generated inner exception specified.
            </devdoc>
        </member>
        <member name="T:System.IO.NotifyFilters">
            <devdoc>
               Specifies the changes to watch for in a file or folder.
            </devdoc>
        </member>
        <member name="F:System.IO.NotifyFilters.FileName">
            <devdoc>
               [To be supplied.]
            </devdoc>
        </member>
        <member name="F:System.IO.NotifyFilters.DirectoryName">
            <devdoc>
               [To be supplied.]
            </devdoc>
        </member>
        <member name="F:System.IO.NotifyFilters.Attributes">
            <devdoc>
               The attributes of the file or folder.
            </devdoc>
        </member>
        <member name="F:System.IO.NotifyFilters.Size">
            <devdoc>
               The size of the file or folder.
            </devdoc>
        </member>
        <member name="F:System.IO.NotifyFilters.LastWrite">
            <devdoc>
                  The date that the file or folder last had anything written to it.
            </devdoc>
        </member>
        <member name="F:System.IO.NotifyFilters.LastAccess">
            <devdoc>
               The date that the file or folder was last opened.
            </devdoc>
        </member>
        <member name="F:System.IO.NotifyFilters.CreationTime">
            <devdoc>
               [To be supplied.]
            </devdoc>
        </member>
        <member name="F:System.IO.NotifyFilters.Security">
            <devdoc>
               The security settings of the file or folder.
            </devdoc>
        </member>
        <member name="T:System.IO.RenamedEventArgs">
            <devdoc>
               Provides data for the <see cref='E:System.IO.FileSystemWatcher.Renamed'/> event.
            </devdoc>
        </member>
        <member name="M:System.IO.RenamedEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String,System.String)">
            <devdoc>
               Initializes a new instance of the <see cref='T:System.IO.RenamedEventArgs'/> class.
            </devdoc>
        </member>
        <member name="P:System.IO.RenamedEventArgs.OldFullPath">
            <devdoc>
               Gets the previous fully qualified path of the affected file or directory.
            </devdoc>
        </member>
        <member name="P:System.IO.RenamedEventArgs.OldName">
            <devdoc>
               Gets the old name of the affected file or directory.
            </devdoc>
        </member>
        <member name="T:System.IO.RenamedEventHandler">
            <devdoc>
               Represents the method that will handle the <see cref='E:System.IO.FileSystemWatcher.Renamed'/> event of a <see cref='T:System.IO.FileSystemWatcher'/> class.
            </devdoc>
        </member>
        <member name="T:System.IO.WatcherChangeTypes">
            <devdoc>
               Changes that may occur to a file or directory.
            </devdoc>
        </member>
        <member name="F:System.IO.WatcherChangeTypes.Created">
            <devdoc>
               The creation of a file or folder.
            </devdoc>
        </member>
        <member name="F:System.IO.WatcherChangeTypes.Deleted">
            <devdoc>
               The deletion of a file or folder.
            </devdoc>
        </member>
        <member name="F:System.IO.WatcherChangeTypes.Changed">
            <devdoc>
               The change of a file or folder.
            </devdoc>
        </member>
        <member name="F:System.IO.WatcherChangeTypes.Renamed">
            <devdoc>
               The renaming of a file or folder.
            </devdoc>
        </member>
        <member name="F:System.IO.WatcherChangeTypes.All">
            <devdoc>
               [To be supplied.]
            </devdoc>
        </member>
        <member name="T:System.IO.PathInternal">
            <summary>Contains internal path helpers that are shared between many projects.</summary>
            <summary>Contains internal path helpers that are shared between many projects.</summary>
        </member>
        <member name="P:System.IO.PathInternal.StringComparison">
            <summary>Returns a comparison that can be used to compare file and directory names for equality.</summary>
        </member>
        <member name="P:System.IO.PathInternal.IsCaseSensitive">
            <summary>Gets whether the system is case-sensitive.</summary>
        </member>
        <member name="M:System.IO.PathInternal.GetIsCaseSensitive">
            <summary>
            Determines whether the file system is case sensitive.
            </summary>
            <remarks>
            Ideally we'd use something like pathconf with _PC_CASE_SENSITIVE, but that is non-portable, 
            not supported on Windows or Linux, etc. For now, this function creates a tmp file with capital letters 
            and then tests for its existence with lower-case letters.  This could return invalid results in corner 
            cases where, for example, different file systems are mounted with differing sensitivities.
            </remarks>
        </member>
        <member name="P:System.SR.BufferSizeTooLarge">
            <summary>The specified buffer size is too large. FileSystemWatcher cannot allocate {0} bytes for the internal buffer.</summary>
        </member>
        <member name="P:System.SR.FSW_IOError">
            <summary>Error reading the {0} directory.</summary>
        </member>
        <member name="P:System.SR.FSW_BufferOverflow">
            <summary>Too many changes at once in directory:{0}.</summary>
        </member>
        <member name="P:System.SR.InvalidDirName">
            <summary>The directory name {0} is invalid.</summary>
        </member>
        <member name="P:System.SR.InvalidDirName_NotExists">
            <summary>The directory name '{0}' does not exist.</summary>
        </member>
        <member name="P:System.SR.InvalidEnumArgument">
            <summary>The value of argument '{0}' ({1}) is invalid for Enum type '{2}'.</summary>
        </member>
        <member name="P:System.SR.IO_FileExists_Name">
            <summary>The file '{0}' already exists.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_FileLengthTooBig">
            <summary>Specified file length was too large for the file system.</summary>
        </member>
        <member name="P:System.SR.IO_PathTooLong">
            <summary>The specified file name or path is too long, or a component of the specified path is too long.</summary>
        </member>
        <member name="P:System.SR.IO_PathNotFound_NoPathName">
            <summary>Could not find a part of the path.</summary>
        </member>
        <member name="P:System.SR.IO_PathNotFound_Path">
            <summary>Could not find a part of the path '{0}'.</summary>
        </member>
        <member name="P:System.SR.IO_FileNotFound">
            <summary>Unable to find the specified file.</summary>
        </member>
        <member name="P:System.SR.IO_FileNotFound_FileName">
            <summary>Could not find file '{0}'.</summary>
        </member>
        <member name="P:System.SR.UnauthorizedAccess_IODenied_NoPathName">
            <summary>Access to the path is denied.</summary>
        </member>
        <member name="P:System.SR.UnauthorizedAccess_IODenied_Path">
            <summary>Access to the path '{0}' is denied.</summary>
        </member>
        <member name="P:System.SR.IO_SharingViolation_File">
            <summary>The process cannot access the file '{0}' because it is being used by another process.</summary>
        </member>
        <member name="P:System.SR.IO_SharingViolation_NoFileName">
            <summary>The process cannot access the file because it is being used by another process.</summary>
        </member>
        <member name="P:System.SR.EventStream_FailedToStart">
            <summary>Failed to start the EventStream</summary>
        </member>
        <member name="P:System.SR.Argument_InvalidPathChars">
            <summary>Illegal characters in path '{0}'.</summary>
        </member>
        <member name="P:System.SR.IOException_INotifyInstanceSystemLimitExceeded">
            <summary>The system limit on the number of inotify instances has been reached.</summary>
        </member>
        <member name="P:System.SR.IOException_INotifyInstanceUserLimitExceeded_Value">
            <summary>The configured user limit ({0}) on the number of inotify instances has been reached, or the per-process limit on the number of open file descriptors has been reached.</summary>
        </member>
        <member name="P:System.SR.IOException_INotifyWatchesUserLimitExceeded_Value">
            <summary>The configured user limit ({0}) on the number of inotify watches has been reached, or the operating system failed to allocate a required resource.</summary>
        </member>
        <member name="P:System.SR.IOException_INotifyInstanceUserLimitExceeded">
            <summary>The configured user limit on the number of inotify instances has been reached, or the per-process limit on the number of open file descriptors has been reached.</summary>
        </member>
        <member name="P:System.SR.IOException_INotifyWatchesUserLimitExceeded">
            <summary>The configured user limit on the number of inotify watches has been reached, or the operating system failed to allocate a required resource.</summary>
        </member>
        <member name="P:System.SR.IO_PathTooLong_Path">
            <summary>The path '{0}' is too long, or a component of the specified path is too long.</summary>
        </member>
        <member name="M:Interop.Sys.Read(System.Runtime.InteropServices.SafeHandle,System.Byte*,System.Int32)">
            <summary>
            Reads a number of bytes from an open file descriptor into a specified buffer.
            </summary>
            <param name="fd">The open file descriptor to try to read from</param>
            <param name="buffer">The buffer to read info into</param>
            <param name="count">The size of the buffer</param>
            <returns>
            Returns the number of bytes read on success; otherwise, -1 is returned
            Note - on fail. the position of the stream may change depending on the platform; consult man 2 read for more info
            </returns>
        </member>
        <member name="M:Interop.Sys.Poll(Interop.Sys.PollEvent*,System.UInt32,System.Int32,System.UInt32*)">
            <summary>
            Polls a set of file descriptors for signals and returns what signals have been set
            </summary>
            <param name="pollEvents">A list of PollEvent entries</param>
            <param name="eventCount">The number of entries in pollEvents</param>
            <param name="timeout">The amount of time to wait; -1 for infinite, 0 for immediate return, and a positive number is the number of milliseconds</param>
            <param name="triggered">The number of events triggered (i.e. the number of entries in pollEvents with a non-zero TriggeredEvents). May be zero in the event of a timeout.</param>
            <returns>An error or Error.SUCCESS.</returns>
        </member>
        <member name="M:Interop.Sys.Poll(System.Runtime.InteropServices.SafeHandle,Interop.Sys.PollEvents,System.Int32,Interop.Sys.PollEvents@)">
            <summary>
            Polls a File Descriptor for the passed in flags.
            </summary>
            <param name="fd">The descriptor to poll</param>
            <param name="events">The events to poll for</param>
            <param name="timeout">The amount of time to wait; -1 for infinite, 0 for immediate return, and a positive number is the number of milliseconds</param>
            <param name="triggered">The events that were returned by the poll call. May be PollEvents.POLLNONE in the case of a timeout.</param>
            <returns>An error or Error.SUCCESS.</returns>
        </member>
        <member name="T:Interop.Error">
            <summary>Common Unix errno error codes.</summary>
        </member>
        <member name="M:Interop.CheckIo(System.Int64,System.String,System.Boolean,System.Func{Interop.ErrorInfo,Interop.ErrorInfo})">
            <summary>
            Validates the result of system call that returns greater than or equal to 0 on success
            and less than 0 on failure, with errno set to the error code.
            If the system call failed for any reason, an exception is thrown. Otherwise, the system call succeeded.
            </summary>
            <param name="result">The result of the system call.</param>
            <param name="path">The path with which this error is associated.  This may be null.</param>
            <param name="isDirectory">true if the <paramref name="path"/> is known to be a directory; otherwise, false.</param>
            <param name="errorRewriter">Optional function to change an error code prior to processing it.</param>
            <returns>
            On success, returns the non-negative result long that was validated.
            </returns>
        </member>
        <member name="M:Interop.CheckIo(System.Int32,System.String,System.Boolean,System.Func{Interop.ErrorInfo,Interop.ErrorInfo})">
            <summary>
            Validates the result of system call that returns greater than or equal to 0 on success
            and less than 0 on failure, with errno set to the error code.
            If the system call failed for any reason, an exception is thrown. Otherwise, the system call succeeded.
            </summary>
            <returns>
            On success, returns the non-negative result int that was validated.
            </returns>
        </member>
        <member name="M:Interop.CheckIo(System.IntPtr,System.String,System.Boolean,System.Func{Interop.ErrorInfo,Interop.ErrorInfo})">
            <summary>
            Validates the result of system call that returns greater than or equal to 0 on success
            and less than 0 on failure, with errno set to the error code.
            If the system call failed for any reason, an exception is thrown. Otherwise, the system call succeeded.
            </summary>
            <returns>
            On success, returns the non-negative result IntPtr that was validated.
            </returns>
        </member>
        <member name="M:Interop.CheckIo``1(``0,System.String,System.Boolean,System.Func{Interop.ErrorInfo,Interop.ErrorInfo})">
            <summary>
            Validates the result of system call that returns greater than or equal to 0 on success
            and less than 0 on failure, with errno set to the error code.
            If the system call failed for any reason, an exception is thrown. Otherwise, the system call succeeded.
            </summary>
            <returns>
            On success, returns the valid SafeFileHandle that was validated.
            </returns>
        </member>
        <member name="M:Interop.GetExceptionForIoErrno(Interop.ErrorInfo,System.String,System.Boolean)">
            <summary>
            Gets an Exception to represent the supplied error info.
            </summary>
            <param name="errorInfo">The error info</param>
            <param name="path">The path with which this error is associated.  This may be null.</param>
            <param name="isDirectory">true if the <paramref name="path"/> is known to be a directory; otherwise, false.</param>
            <returns></returns>
        </member>
    </members>
</doc>
